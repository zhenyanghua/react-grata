{"version":3,"sources":["../../src/utils.ts","../../src/cssom.ts","../../src/generateAlphabeticName.ts","../../src/hash.ts","../../src/index.tsx","../../src/generateComponentId.ts","App.js","index.js"],"names":["connect","arr","deriveMsDimension","result","arrayIndex","count","dimension","gap","CustomCss","replaceCustomRows","rows","rowGap","rest","gaps","Array","otherRows","x","size","StyleSheetProvider","style","document","this","insertRules","rules","sheet","Error","AD_REPLACER_R","getAlphabeticChar","code","String","str","name","Math","generateAlphabeticName","h","i","phash","hash","ClassName","GridBase","props","columns","columnGap","children","className","autoDimensions","maxColumns","maxRows","React","child","row","column","rowSpan","columnSpan","deriveAutoDimensions","newGridTemplate","msRows","msColumns","dynamicRules","gridClass","generateComponentId","mergedClassName","useLayoutEffect","Grid","layout","matrix","cells","j","cell","id","Object","deriveLayout","layoutById","obj","arrayToObject","assignCellLayout","Cell","cellClass","Header","Code","Example","App","useMediaQuery","query","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f446d7c3.chunk.js","sourcesContent":["import React from 'react'\nimport { CellArea, ColumnsReplacement, RowsReplacement } from './typings'\n\n/**\n * Join array with a single space\n * @param arr\n * @return string form of array with space as separator.\n */\nexport const connect = (arr: string[]): string => arr.join(' ')\n\n/**\n * Derive the ie 11 columns and rows for grid container.\n * @remarks ie 11 doesn't support gap, but we could fake gap\n * by creating extra track for layout, this behavior should\n * be managed separately for ie 11.\n *\n * ie 11 API reference\n * https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/dev-guides/hh673533(v=vs.85)?redirectedfrom=MSDN\n *\n * @param dimension\n * @param gap\n * @return dimension string literal\n */\nexport const deriveMsDimension = (\n  dimension: string[],\n  gap: string | number\n): string => {\n  const result = []\n  let arrayIndex = 0\n  let count = 0\n  while (count < 2 * dimension.length - 1) {\n    if (count++ % 2 === 0) {\n      result.push(dimension[arrayIndex++])\n    } else {\n      result.push(gap.toString())\n    }\n  }\n  return connect(result)\n}\n\n/**\n * Derive the columns and rows for the grid container.\n * @param children\n * @return {{columns: any[], rows: any[]}}\n */\nexport const deriveAutoDimensions = (\n  children: React.ReactElement | null | undefined\n) => {\n  let maxColumns = 0\n  let maxRows = 0\n\n  if (children) {\n    React.Children.forEach(children, (child) => {\n      const { row = 1, column = 1, rowSpan = 1, columnSpan = 1 } = child.props\n\n      if (row + rowSpan - 1 > maxRows) {\n        maxRows = row + rowSpan - 1\n      }\n      if (column + columnSpan - 1 > maxColumns) {\n        maxColumns = column + columnSpan - 1\n      }\n    })\n  }\n\n  return {\n    columns: Array(maxColumns).fill('1fr'),\n    rows: Array(maxRows).fill('1fr')\n  }\n}\n\n/**\n * Convert the layout array to an object\n * [{key}]\n * @param arr\n * @param key\n * @return {{}}\n */\nexport const arrayToObject = (arr: CellArea[], key: string | number) => {\n  const obj = {}\n  arr.forEach((x) => (obj[x[key]] = x))\n  return obj\n}\n\n/**\n * Spread layout from the collection to each cell.\n * @param children\n * @param layout\n * @return {Array<Exclude<*, boolean | null | undefined>>}\n */\nexport const assignCellLayout = (\n  children: React.ReactElement,\n  layout: CellArea[]\n) => {\n  const layoutById = arrayToObject(layout, 'id')\n  return React.Children.map(children, (child) => {\n    return React.cloneElement(child, {\n      ...layoutById[child.props.id],\n      ...child.props\n    })\n  })\n}\n\n/**\n * Matrix rules are:\n * 1. it must describe a complete grid, every cell on the grid must be filled.\n * 2. each area must be a rectangle.\n * 3. each area could only be defined one.\n * 4. empty area could be defined with undefined.\n *\n * Cell row and col id are scanned in\n * the order of how the matrix is scanned.\n * top-left to bottom right.\n * If a cell is already registered, only need\n * to increment the row/col span.\n * If not, register the cell.\n */\nexport const deriveLayout = (matrix: (string | number)[][]) => {\n  const layout = {}\n\n  matrix.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      if (layout[cell]) {\n        if (layout[cell].row === i + 1) {\n          layout[cell].columnSpan++\n        } else if (layout[cell].column === j + 1) {\n          layout[cell].rowSpan++\n        }\n      } else if (cell) {\n        layout[cell] = {\n          id: cell,\n          row: i + 1,\n          column: j + 1,\n          rowSpan: 1,\n          columnSpan: 1\n        }\n      }\n    })\n  })\n\n  return Object.keys(layout).map((id) => layout[id])\n}\n\nexport enum CustomCss {\n  FitHeight = 'fit-height'\n}\n\nexport interface GridReplacement extends RowsReplacement, ColumnsReplacement {}\n\n/**\n * This is the filter chain for any template replacement\n * @param gridReplacement\n */\nexport const replaceCustomGridTemplate = (\n  gridReplacement: GridReplacement\n): GridReplacement => {\n  return replaceCustomRows(gridReplacement)\n}\n\n/**\n * This filter replace the 'fit-height' with the computed value height value\n * so that it occupies the remainder height space of the container.\n * @remarks the requirement for this filter to work is there must be up to\n * one row that define 'fit-height' custom value.\n * @param gridReplacement\n * @example the following sets the first and last row to have a height of\n * '200px', and the second row to occupy the remainder of the height space.\n * `<Grid rows={['200px', 'fit-height', '200px']} {...otherProps} />`\n */\nconst replaceCustomRows = ({\n  rows,\n  rowGap,\n  ...rest\n}: GridReplacement): GridReplacement => {\n  const gaps = Array(rows.length - 1)\n    .fill(rowGap)\n    .join(' - ')\n  let otherRows = '0'\n  if (rows.includes(CustomCss.FitHeight)) {\n    otherRows = rows.filter((x) => x !== CustomCss.FitHeight).join(' - ')\n  }\n  const newRows = rows.map((size) => {\n    if (size === CustomCss.FitHeight) {\n      return `calc(100% - ${otherRows} - ${gaps})`\n    }\n    return size\n  })\n\n  return {\n    rows: newRows,\n    rowGap,\n    ...rest\n  }\n}\n","/**\n * Singleton class that provides the stylesheet\n */\nclass StyleSheetProvider {\n  private static INSTANCE: StyleSheetProvider\n  private readonly sheet: CSSStyleSheet\n\n  constructor() {\n    const style = document.createElement('style')\n    style.setAttribute('data-grata', '')\n    document.head.appendChild(style)\n    this.sheet = style.sheet as CSSStyleSheet\n  }\n\n  static get instance() {\n    if (!StyleSheetProvider.INSTANCE) {\n      StyleSheetProvider.INSTANCE = new StyleSheetProvider()\n    }\n\n    return StyleSheetProvider.INSTANCE\n  }\n\n  get styleSheet(): CSSStyleSheet {\n    return this.sheet\n  }\n}\n\nexport const removeStyle = (style: HTMLStyleElement) => {\n  if (style) {\n    document.head.removeChild(style)\n  }\n}\n\nexport const insertRules = (rules: string) => {\n  const sheet = StyleSheetProvider.instance.styleSheet\n  if (!sheet) {\n    throw new Error('Failed to find CSSStyleSheet from the style element')\n  }\n\n  sheet.insertRule(rules, sheet.cssRules.length)\n}\n","/**\n * https://github.com/styled-components/styled-components/v5.1.1/master/packages/styled-components/src/utils/generateAlphabeticName.js\n */\nconst AD_REPLACER_R = /(a)(d)/gi\n\n/* This is the \"capacity\" of our alphabet i.e. 2x26 for all letters plus their capitalised\n * counterparts */\nconst charsLength = 52\n\n/* start at 75 for 'a' until 'z' (25) and then start at 65 for capitalised letters */\nconst getAlphabeticChar = (code: number): string =>\n  String.fromCharCode(code + (code > 25 ? 39 : 97))\n\n/* input a number, usually a hash and convert it to base-52 */\nexport default function generateAlphabeticName(code: number): string {\n  let name = ''\n  let x\n\n  /* get a char and divide by alphabet-length */\n  for (x = Math.abs(code); x > charsLength; x = (x / charsLength) | 0) {\n    name = getAlphabeticChar(x % charsLength) + name\n  }\n\n  return (getAlphabeticChar(x % charsLength) + name).replace(\n    AD_REPLACER_R,\n    '$1-$2'\n  )\n}\n","/**\n * https://github.com/styled-components/styled-components/v5.1.1/master/packages/styled-components/src/utils/hash.js\n */\n\nexport const SEED = 5381\n\n// When we have separate strings it's useful to run a progressive\n// version of djb2 where we pretend that we're still looping over\n// the same string\nexport const phash = (h: number, x: string): number => {\n  let i = x.length\n\n  while (i) {\n    h = (h * 33) ^ x.charCodeAt(--i)\n  }\n\n  return h\n}\n\n// This is a djb2 hashing function\nexport const hash = (x: string): number => {\n  return phash(SEED, x)\n}\n","import React, { ReactElement, useLayoutEffect } from 'react'\nimport {\n  assignCellLayout,\n  connect,\n  deriveAutoDimensions,\n  deriveLayout,\n  deriveMsDimension,\n  replaceCustomGridTemplate\n} from './utils'\nimport { CellProps, GridBaseProps, GridProps } from './typings'\nimport { insertRules } from './cssom'\nimport generateComponentId from './generateComponentId'\n\nexport enum ClassName {\n  GRID = 'grata-grid',\n  CELL = 'grata-cell'\n}\n\n/**\n * ie fake gap by creating extra track for layout, this behavior should\n * be managed separately for ie.\n *\n * @example\n * rows={[\"70px\", \"70px\", \"70px\", \"70px\", \"70px\"]}\n * columns={[\"1fr\", \"1fr\", \"1fr\"]}\n */\nconst GridBase: React.FC<GridBaseProps> = (props) => {\n  let { rows, columns, ...rest } = props\n  const { rowGap = 0, columnGap = 0, children, className } = rest\n\n  const autoDimensions = deriveAutoDimensions(children as ReactElement)\n\n  if (!rows) {\n    rows = autoDimensions.rows\n  }\n  if (!columns) {\n    columns = autoDimensions.columns\n  }\n  // Replace custom css values\n  const newGridTemplate = replaceCustomGridTemplate({\n    rows,\n    columns,\n    rowGap,\n    columnGap\n  })\n\n  rows = newGridTemplate.rows\n  columns = newGridTemplate.columns\n\n  // Account for ie fake gap\n  const msRows = deriveMsDimension(rows, rowGap)\n  const msColumns = deriveMsDimension(columns, columnGap)\n\n  const dynamicRules = `\n    grid-row-gap: ${rowGap};\n    grid-column-gap: ${columnGap};\n    grid-template-rows: ${connect(rows)};\n    grid-template-columns: ${connect(columns)};\n\n    -ms-grid-rows: ${msRows};\n    -ms-grid-columns: ${msColumns};\n  `\n\n  const gridClass = generateComponentId(dynamicRules)\n  const rules = `\n  .${gridClass} {\n    display: grid;\n    display: -ms-grid;\n  ${dynamicRules}\n  }\n `\n  const mergedClassName = `${gridClass} ${className || ClassName.GRID}`\n\n  useLayoutEffect(() => {\n    insertRules(rules)\n  })\n\n  return <div className={mergedClassName}>{children}</div>\n}\n\nexport const Grid: React.FC<GridProps> = (props) => {\n  let { layout } = props\n  const { children, matrix, ...rest } = props\n\n  let cells = children\n\n  if (matrix) {\n    layout = deriveLayout(matrix)\n  }\n\n  if (layout) {\n    cells = assignCellLayout(children as ReactElement, layout)\n  }\n\n  return React.createElement(GridBase, { ...rest }, cells)\n}\n\nexport const Cell: React.FC<CellProps> = (props) => {\n  const {\n    row,\n    rowSpan = 1,\n    column,\n    columnSpan = 1,\n    children,\n    className\n  } = props\n\n  if (!row || !column) {\n    return null\n  }\n\n  // Account for ie fake gap\n  const msRow = 2 * row - 1\n  const msRowSpan = 2 * rowSpan - 1\n  const msColumn = 2 * column - 1\n  const msColumnSpan = 2 * columnSpan - 1\n\n  const dynamicRules = `\n    grid-row: ${row} / span ${rowSpan};\n    grid-column: ${column} / span ${columnSpan};\n\n    -ms-grid-row: ${msRow};\n    -ms-grid-row-span: ${msRowSpan};\n    -ms-grid-column: ${msColumn};\n    -ms-grid-column-span: ${msColumnSpan};\n  `\n  const cellClass = generateComponentId(dynamicRules)\n  const rules = `\n  .${cellClass} {\n  ${dynamicRules}\n  }`\n  const mergedClassName = `${cellClass} ${className || ClassName.CELL}`\n\n  useLayoutEffect(() => {\n    insertRules(rules)\n  })\n\n  return <div className={mergedClassName}>{children}</div>\n}\n","/**\n * https://github.com/styled-components/styled-components/blob/v5.1.1/packages/styled-components/src/utils/generateComponentId.js\n */\n\nimport generateAlphabeticName from './generateAlphabeticName'\nimport { hash } from './hash'\n\nexport default (str: string): string => {\n  return generateAlphabeticName(hash(str) >>> 0)\n}\n","import React from 'react'\nimport { Grid, Cell } from 'react-grata'\nimport { useMediaQuery } from 'react-responsive'\n\nimport './App.css'\n\nconst Header = () => (\n  <>\n    <h1>react-grata</h1>\n    <small>Light weight react grid layout component that support IE 11. What you draw is what you get.</small>\n  </>\n)\n\nconst Code = () => (\n  <pre>\n    {`\n    const App = () => {\n      const matrix = [\n        [1, 1, 1],\n        [2, 3, 3],\n        [2, 5, 6],\n        [7, 7, 6],\n        [8, 8, 8],\n      ];\n\n      return (\n        <Grid rowGap=\"12px\" \n              columnGap=\"12px\" \n              matrix={matrix}\n              rows={['2rem', '2rem', 'fit-height', '2rem', '2rem']}>\n          <Cell id={1}>1</Cell>\n          <Cell id={2}>2</Cell>\n          <Cell id={3}>3</Cell>\n          <Cell id={5}>5</Cell>\n          <Cell id={6}>6</Cell>\n          <Cell id={7}>7</Cell>\n          <Cell id={8}>8</Cell>\n        </Grid>\n      );\n    }`}\n  </pre>\n)\n\nconst Example = () => {\n  const matrix = [\n    [1, 1, 1],\n    [2, 3, 3],\n    [2, 5, 6],\n    [7, 7, 6],\n    [8, 8, 8],\n  ];\n  const rowGap = \"12px\";\n  const columnGap = \"12px\";\n\n  return (\n    <Grid className=\"grid-inside\"\n          rowGap={rowGap}\n          columnGap={columnGap}\n          matrix={matrix}\n          rows={['2rem', '2rem', 'fit-height', '2rem', '2rem']}>\n      <Cell id={1}>1</Cell>\n      <Cell id={2}>2</Cell>\n      <Cell id={3}>3</Cell>\n      <Cell id={5}>5</Cell>\n      <Cell id={6}>6</Cell>\n      <Cell id={7}>7</Cell>\n      <Cell id={8}>8</Cell>\n    </Grid>\n  );\n}\nconst App = () => {\n\n  const isMobile = useMediaQuery({ query: '(max-width: 500px)' });\n  const matrixMobile = [\n    ['hd'],\n    ['cd'],\n    ['eg'],\n  ];\n  const matrixOthers = [\n    ['hd', 'hd'],\n    ['cd', 'eg'],\n  ];\n  const matrix = isMobile ? matrixMobile : matrixOthers;\n\n  return (\n    <Grid className=\"grid-outside\"\n          rowGap=\"10px\"\n          columnGap=\"10px\"\n          matrix={matrix}>\n      <Cell className=\"cell\" id=\"hd\">\n        <Header/>\n      </Cell>\n      <Cell className=\"cell\" id=\"cd\">\n        <Code/>\n      </Cell>\n      <Cell className=\"cell\" id=\"eg\">\n        <Example/>\n      </Cell>\n    </Grid>\n  )\n}\n\nexport default App\n","import 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}